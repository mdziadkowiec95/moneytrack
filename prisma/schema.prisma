// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  INCOME
  OUTCOME
}

enum FinanceSourceType {
  CASH
  BANK_ACCOUNT
  INVESTMENT
}

enum Currency {
  USD
  PLN
  GBP
  EUR
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  displayName  String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id                   String                @id @default(uuid())
  type                 TransactionType       @default(INCOME)
  title                String
  amount               Float                 @default(0)
  category             Category              @relation(fields: [categoryId], references: [id])
  categoryId           Int
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  date                 DateTime
  user                 User                  @relation(fields: [userId], references: [id])
  userId               String
  financeSource        FinanceSource         @relation(fields: [financeSourceId], references: [id], onDelete: Cascade)
  financeSourceId      String
  financeSourceHistory FinanceSourceHistory?
}

model FinanceSourceHistory {
  id              String        @id @default(uuid())
  financeSource   FinanceSource @relation(fields: [financeSourceId], references: [id])
  financeSourceId String
  balance         Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  transaction     Transaction?  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId   String?       @unique
}

model FinanceSource {
  id                     String                 @id @default(cuid())
  name                   String
  description            String?
  type                   FinanceSourceType      @default(CASH)
  currency               Currency
  balance                Float                  @default(0)
  user                   User                   @relation(fields: [userId], references: [id])
  userId                 String
  transactions           Transaction[]
  financeSourceHistories FinanceSourceHistory[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

enum Role {
  USER
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                     String                 @id @default(uuid())
  // by default should be email (if not provided)
  username               String
  email                  String                 @unique
  password               String
  firstName              String
  lastName               String
  // Role is for the future enhancement (for now only standard USER role)
  role                   Role                   @default(USER)
  cratedAt               DateTime               @default(now())
  accounts               Account[]
  transactions           Transaction[]
  financeSources         FinanceSource[]
  financeSourceHistories FinanceSourceHistory[]
  sessions               Session[]
  emailVerified          DateTime?
  image                  String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
